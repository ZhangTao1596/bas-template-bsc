// Code generated by go-bindata.
// sources:
// faucet.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x8f\xe3\xb6\x11\xff\xec\xfd\x2b\x26\xea\x25\x96\xbb\x2b\xc9\xbe\xcd\x0b\xb6\xe4\xe2\x72\x49\x83\x2b\xda\x4b\x90\x4b\xd0\x16\x49\x3e\xd0\xd2\xd8\xe2\x2e\x45\x2a\xe4\xc8\x5e\xc7\xf0\xff\x5e\x90\x7a\x58\x7e\xec\xf6\x1e\x01\x8a\xde\x07\xaf\x48\x0e\x67\x7e\x9c\x19\xce\x43\xba\xf8\xa3\xaf\xbf\x7b\xf9\xe3\xbf\xbf\xff\x06\x72\x2a\xc4\xfc\x2a\xb6\x7f\x40\x30\xb9\x4a\x3c\x94\x9e\x9d\x40\x96\xcd\xaf\x06\x71\x81\xc4\x20\xcd\x99\x36\x48\x89\x57\xd1\x32\xf8\xd2\xeb\xe6\x73\xa2\x32\xc0\xdf\x2a\xbe\x4e\xbc\x7f\x05\x3f\xbd\x08\x5e\xaa\xa2\x64\xc4\x17\x02\x3d\x48\x95\x24\x94\x94\x78\xaf\xbe\x49\x30\x5b\xe1\x61\x9b\x64\x05\x26\xde\x9a\xe3\xa6\x54\x9a\x7a\x94\x1b\x9e\x51\x9e\x64\xb8\xe6\x29\x06\x6e\x70\x03\x5c\x72\xe2\x4c\x04\x26\x65\x02\x93\x89\x37\xbf\xba\x1a\xc4\xc4\x49\xe0\x7c\xb7\x0b\x5f\x23\x6d\x94\xbe\xdf\xef\xa7\xf0\x57\x56\xa5\x48\x71\x54\xaf\x59\x2a\xc1\xe5\x3d\xe4\x1a\x97\x89\x67\x91\x9a\x69\x14\xa5\x99\xbc\x33\x61\x2a\x54\x95\x2d\x05\xd3\x18\xa6\xaa\x88\xd8\x1d\x7b\x88\x04\x5f\x98\x88\x36\x9c\x08\x75\xb0\x50\x8a\x0c\x69\x56\x46\xb7\xe1\x6d\xf8\x45\x94\x1a\x13\x75\x73\x61\xc1\x65\x98\x1a\xe3\x81\x46\x91\x78\x86\xb6\x02\x4d\x8e\x48\x1e\x44\xf3\xf7\x12\xbb\x54\x92\x02\xb6\x41\xa3\x0a\x8c\x3e\x0d\xbf\x08\xc7\x4e\x62\x7f\xfa\x69\xa1\x57\x83\xd8\xa4\x9a\x97\x04\x46\xa7\x6f\x2d\xf6\xee\xb7\x0a\xf5\x36\xba\x0d\x27\xe1\xa4\x19\x38\x31\x77\xc6\x9b\xc7\x51\xcd\x70\xfe\x21\xac\x03\xa9\x68\x1b\x3d\x0f\x3f\x0d\x27\x51\xc9\xd2\x7b\xb6\xc2\xac\x15\x64\x97\xc2\x76\xf2\x8f\x12\xfb\x98\xfd\xee\x4e\xcd\xf7\x07\xc8\x2a\x54\x81\x92\xc2\x3b\x13\x3d\x0f\x27\x5f\x86\xe3\x76\xe2\x9c\xbd\xe5\x6f\xed\x35\xbf\x1a\x0c\xc2\x35\x6a\xe2\x29\x13\x41\x8a\x92\x50\xc3\xee\x6a\x30\x18\x14\x5c\x06\x39\xf2\x55\x4e\x53\x98\x8c\xc7\x1f\xcf\x2e\x4c\xae\x73\x37\x9b\x71\x53\x0a\xb6\x9d\xc2\x52\xe0\x83\x9b\x61\x82\xaf\x64\xc0\x09\x0b\x33\x85\x9a\xab\x9d\xdf\x5b\x69\xa5\x56\x2b\x8d\xc6\xd4\x62\x4a\x65\x38\x71\x25\xa7\xd6\x89\x18\xf1\x35\x9e\x13\x9a\x92\xc9\x53\x6a\xb6\x30\x4a\x54\x84\xc7\x00\x16\x42\xa5\xf7\x6e\xca\x5d\xd5\x1e\xf2\x54\x09\xa5\xa7\xb0\xc9\x39\x75\x12\x4a\x8d\x0d\x5b\x96\x65\x5c\xae\xa6\xf0\x79\x59\xe3\x2f\x98\x5e\x71\x39\x85\x71\x43\x1a\x47\x8d\xb6\xe2\xa8\x8e\x42\x57\xf1\x42\x65\xdb\xf9\x55\x9c\xf1\x35\xa4\x82\x19\x93\x78\x27\x6a\x74\xc1\xa5\xb7\x6c\x43\x0a\xe3\xb2\x5e\x38\x5a\xd1\x6a\xe3\x81\x13\x90\x78\xb5\xe4\x60\xa1\x88\x54\x31\x85\x89\x45\xe4\x36\x9c\xf0\x12\x81\x58\x05\x93\xe7\xf5\xd2\x20\xce\x27\x2d\x03\xc2\x07\x0a\x9c\xfe\x3b\xcd\x7b\xf3\x98\xb7\x3b\x97\x0c\x96\x2c\x58\x30\xca\x3d\x60\x9a\xb3\x20\xe7\x59\x86\x32\xf1\x48\x57\x68\x3d\x84\xcf\xa1\x1f\xc4\xba\x18\x96\x4f\x6a\x14\x51\xc6\xd7\xee\x00\xdd\xc3\xc9\x49\x1e\x03\xfb\x25\x34\x0f\x6a\xb9\x34\x48\x41\x87\xbd\x47\xca\x65\x59\x51\xb0\xd2\xaa\x2a\x9b\xd5\x41\xec\xe6\x80\x67\x89\x57\x69\xe1\x35\x91\xda\x3d\xd2\xb6\x6c\x0e\xec\x75\xc7\x53\xba\x08\xac\xa6\xb5\x12\x1e\x94\x82\xa5\x98\x2b\x91\xa1\x4e\xbc\x37\x2a\xe5\x4c\x80\xac\x4f\x06\x3f\xfd\xf0\x77\x68\x4c\xc2\xe5\x0a\xb6\xaa\xd2\xf0\x15\x97\x4c\xa6\x08\x6f\x0a\xa6\x09\x5e\xe6\x8c\x4b\x60\x59\x66\x9d\x30\x0c\xc3\x0e\x91\xf3\xc7\x73\xc4\xc1\x82\x64\x4b\x63\xc9\x16\x15\x91\xea\x08\x17\x24\x61\x41\x32\xc8\x70\xc9\x2a\x41\x90\x69\x55\x66\x6a\x23\x03\x52\xab\x95\x4d\x4e\xf5\x69\xea\x4d\x1e\x64\x8c\x58\xb3\x94\x78\x2d\x6d\x6b\x32\x66\x4a\x55\x56\x65\x63\xb4\x7a\x12\x1f\x4a\x26\x33\xcc\xac\x89\x85\x41\x6f\xfe\x2d\x5f\x23\x14\x08\xaf\xdd\xad\x82\x1f\xd5\x3d\xca\xc1\xa9\x23\xa4\x4c\x23\x05\x7d\xde\x67\xee\x10\x47\x35\xa6\xfa\x64\xd0\xfc\x8b\x2b\xd1\x72\xea\x4e\x52\xa0\xac\xe0\x68\x14\x68\x1b\x2b\xbc\xf9\x6e\xa7\x99\x5c\x21\x3c\xe3\xd9\xc3\x0d\x3c\x63\x85\xaa\x24\xc1\x34\x81\xf0\x85\x7b\x34\xfb\xfd\x11\x77\x80\x58\xf0\x79\xcc\x9e\x72\x6a\x50\x32\x15\x3c\xbd\x4f\x3c\xe2\xa8\x93\xdd\xce\x32\xdf\xef\x67\x66\x5b\x2c\x94\x48\x86\xf5\xb9\xdd\xb1\x87\x33\xd8\xed\xf8\x12\x9e\x85\x3f\x60\xca\x4a\x4a\x73\xb6\xdf\xaf\x74\xfb\x1c\xe2\x03\xa6\x15\xa1\x3f\xda\xed\x50\x18\xdc\xef\x4d\xb5\x28\x38\xf9\x2d\x4f\x3b\x2f\xb3\xfd\xde\x1e\xa4\x01\xbf\xdf\xc7\x11\x9b\xc7\x91\xe0\xf3\x66\xf1\x58\x3d\x51\x25\x3a\x57\x88\x23\xeb\x31\xff\x5f\xde\xf3\x3d\xae\x56\x5b\x20\xab\x3d\xf3\x3f\x72\x1a\xe8\xbc\xa6\x36\xe9\x0d\x3c\x5b\x60\xf9\x1c\x5f\xc9\xa5\x72\xbe\xf3\x55\x3b\x6a\xdd\xc7\x29\xee\x1d\x1c\xa7\x71\x95\xdd\xae\x91\xb0\xdf\xbf\x9f\xa3\x38\x20\x7e\x8f\xcd\x91\xc3\x74\xa0\x1b\x67\x7f\x43\x7a\xbf\x87\x1e\xf5\xfb\x79\x52\x1d\x80\x1d\xdc\x3e\xda\xb3\x98\xba\x0a\x3a\xfc\x8d\x63\x18\x4e\x78\x8f\xdb\xc4\xdb\xed\xfa\x3b\x9b\xd5\x94\x09\xb1\x60\x4e\x3d\xee\x70\xdd\xa6\xdf\xd1\x3a\xec\x9a\x1b\x57\x4c\xcf\x5b\xf9\x1d\xe4\xff\x9e\x1a\x4e\x92\x1c\xa9\x72\x0a\xb7\xcf\x9f\xca\x70\x9f\x9f\x24\x8d\xdb\x0b\x49\xa3\x64\x12\x05\xb8\xdf\xc0\x14\x4c\xb4\xcf\xcd\x5d\xe9\xc2\xf6\xe9\x96\xc0\xa6\xf0\x0e\x53\x57\x03\x8c\x67\xa0\xd6\xa8\x97\x42\x6d\xa6\xc0\x2a\x52\x33\x28\xd8\x43\x57\xf6\xdc\x8e\xc7\x1d\x60\xcb\x95\xd8\x42\xa0\x4b\x4f\x1a\x7f\xab\xd0\x90\xe9\x92\x51\xbd\xe4\x7e\x6d\x4e\xca\x50\x1a\xcc\x4e\x94\x60\xe5\x59\x5d\x3a\xaa\x16\x69\xab\xbf\x8b\xa8\x97\x4a\x35\xd5\x45\x1f\x40\xc3\xb4\x57\xf6\x78\xf3\x98\xf4\xc1\x73\x28\x7b\xa7\x0a\x41\xdb\xba\xfe\xb1\x02\xa1\x8e\x61\xf6\xcc\x25\xa2\xae\x0b\x4b\xeb\x97\xe0\x86\x71\x44\xd9\x7b\xcb\xb5\xbe\xb6\x60\x06\xdf\x46\xb8\xab\xf6\x0e\xc2\xdd\xf0\xc3\xa4\xe7\xc8\x34\x2d\x90\xd1\xdb\x88\x5f\x56\x32\xeb\x9d\xbd\x9f\x67\x3f\x0c\x45\x25\xf9\x1a\xb5\xe1\xb4\x7d\x5b\x18\x98\x1d\x70\xd4\xe3\x3e\x80\x38\x22\xfd\xb8\x8b\x1d\x1e\xcf\x2e\x70\xf3\xb7\xf9\x73\x15\x77\xcd\x49\x14\xc1\xb7\x42\x2d\x98\x80\xb5\x05\xb8\x10\x68\x80\x14\xd8\x52\x0b\x28\x47\x48\x2b\xad\x51\x12\x18\x62\x54\x19\x50\x4b\x37\xbb\x74\xa5\xe4\xd5\x60\xcd\x34\x30\x22\x2c\x4a\x82\xc4\xd5\xd8\x76\xc6\xa0\x5e\xbb\x36\xc1\x0e\x6c\x4a\xef\xaf\xd5\x81\xda\xf3\x9a\x71\x7b\xd5\x20\x81\x9f\x7f\x9d\x5d\x39\x40\x5f\xe3\x92\x4b\x04\x66\x15\x90\xda\x26\x01\x28\x67\x04\xa9\x46\x46\x68\x20\x15\xca\x54\xba\xc6\x69\xd3\x0d\x58\xac\x2d\x9f\x9a\xab\x9d\x2e\x9d\xdc\x96\x85\x9f\x33\x93\x8f\x5c\x93\xa0\x91\x2a\x2d\x0f\x2b\xf5\xec\x60\xa9\x34\xf8\x76\x33\x4f\xc6\x33\xe0\x71\xcb\x31\x14\x28\x57\x94\xcf\x80\x5f\x5f\x37\xa4\x03\xbe\x04\xbf\x5d\xff\x99\xff\x1a\xd2\x43\x68\xf9\x43\x92\xc0\x41\xce\xc0\x8a\x6a\x78\x98\x52\xf0\x14\x7d\x7e\x03\x93\xd1\xac\x5e\x5b\x68\x64\x75\x87\xe3\x5a\x18\xf7\xb3\xbf\x1a\xec\x67\x7d\x1d\x38\x65\x1f\x69\xa1\x0e\xe5\x06\x18\xac\xb8\x21\xa8\xb4\xb0\x7a\xb0\x74\xb5\xda\x1b\x35\x3b\xaa\xfe\xf9\xcf\xd2\x4b\xf3\xd0\x84\xfd\x1a\x72\xcd\x22\x34\x28\x33\xff\x6f\x6f\xbe\x7b\x1d\x1a\xd2\x5c\xae\xf8\x72\xeb\xef\x2a\x2d\xa6\xf0\xcc\xf7\xfe\x64\x2b\xf6\xd1\xcf\xe3\x5f\xc3\x35\x13\x15\xde\x34\x26\x9d\x42\x9b\xdb\xad\xc5\xa7\xee\xf7\x4c\xe6\x0d\x34\x8f\x53\x38\x16\xbf\x1f\x8d\x66\x97\x12\x60\x2f\x63\x6b\x34\x48\xbe\x25\x6b\xf2\xd4\xb1\xa6\x18\x14\x48\xb9\xca\xac\x36\x34\xa6\x4a\x4a\x4c\x09\xaa\x52\xc9\x46\x31\x20\x94\x31\xad\xd3\xb5\xeb\xc9\xa9\x1b\x34\xb4\x09\x48\xdc\xc0\x3f\x71\xf1\x46\xa5\xf7\x48\xbe\xef\x6f\xb8\xcc\xd4\x26\x14\x2a\x65\x96\xdc\xf6\xb4\xa4\x52\x25\x20\x49\x12\x68\xda\x7a\x6f\x04\x7f\x01\x6f\x63\x6c\x83\xef\xc1\xd4\x3e\xda\xa7\x11\x5c\xc3\xe9\xf6\x5c\x19\x82\x6b\xf0\xa2\xfa\x2a\xd9\x74\xa7\x29\x62\x25\xf7\x46\xf6\x16\xb4\x96\x50\xb2\x40\x63\xd8\x0a\xfb\x48\x71\x8d\x92\x1a\x1f\xb3\xc7\x29\xcc\x0a\x12\x70\xf6\x2a\x99\x36\x58\x13\x84\x36\x00\xd7\xce\x66\xdd\xd5\x11\x25\x09\xc8\x4a\x88\xd6\x3f\xeb\x9b\x30\xab\xbd\xaf\x47\x18\xba\x80\x08\x1f\x25\x09\xd8\x10\x64\xf5\x9b\xb5\x7b\xac\x07\xd4\xf1\x72\x14\xda\x18\x78\xa0\x1f\xcd\x5a\x37\x3e\xe2\x83\xd9\xd3\x8c\x30\x3b\xe5\x84\xd9\x05\x56\x2e\x21\x3d\xce\xa9\x4e\x5f\x3d\x46\x6e\xe2\x02\x1f\x59\x15\x0b\xd4\x8f\x33\xaa\x53\x51\xc3\xc8\xa9\xf3\x95\xa4\xde\xce\x1b\x98\x7c\x3e\xba\xc0\x17\xb5\x56\x8f\xb0\x95\x8a\xb6\xfe\x4e\xb0\xad\xaa\x68\x0a\x43\x52\xe5\x4b\x97\x30\x86\x37\x60\xa5\x4c\xa1\xdb\x7f\xe3\xaa\xff\x29\x0c\xdd\xc8\xae\xf3\x02\xdd\xae\xcf\xc6\xe3\xf1\x0d\xb4\x2f\x52\xbe\x62\xf6\x86\xe9\x0a\xf7\x17\x90\x98\x2a\x4d\xd1\x3c\xa2\xab\xb7\xc2\xd2\x70\xe8\xd0\x34\xe3\xf7\xc4\xd3\x85\xf8\x23\x40\xf0\xc9\x27\x70\xb6\xda\x77\xce\x28\x82\x7f\x30\x7d\x0f\xae\x0c\xd4\xb8\xe6\xaa\x32\x87\x74\x51\x70\x63\x6c\xb7\xcf\x0c\x64\x4a\xa2\xdb\xf1\x2e\x11\xfc\x0c\x5d\x43\x04\x73\x18\x9f\x42\xb3\xb1\xae\x17\xe1\x2f\x04\xfe\x8e\x6b\x3f\xaa\x0f\xf6\x07\x49\x47\x7b\x78\x81\xf0\x51\x02\x9e\x77\xd8\x76\xb6\x6e\x97\x1b\x36\x03\x83\xf4\x63\xad\x77\xbf\x49\x6c\x97\x92\xcf\xe8\xc6\x56\xb4\xe3\xd1\x91\xf0\x7d\xab\xca\x17\x65\x89\x32\x03\x26\xb7\x2e\xb2\x75\x7a\xe4\x92\x14\xa8\xca\x46\xc7\x94\x09\x5b\xa3\x0b\x74\x51\xc6\x6d\xb4\xca\x4c\x55\x51\x28\x09\x09\x04\x93\xd9\x59\xf2\xeb\x69\xad\x3b\xcc\xa9\x19\x2e\x68\xf9\xd8\x14\xc7\x1a\x3a\x21\x0d\x26\x47\xca\x3f\xb2\xcb\x25\x03\x0c\x3a\xbc\xbc\xd5\xdf\x91\x51\x5a\xab\xf4\xf5\xd3\x43\x5c\xef\xbe\x9e\xbc\x15\xf0\x6e\xb1\xac\x4c\xee\x9f\x40\x1b\xcd\x8e\x2d\xf0\x8a\x50\x33\x42\xd7\x92\x38\x8d\xa3\x24\xae\xf1\x4c\xf1\xc0\xa4\x2d\x67\x02\x8d\x32\x43\xdd\x56\x00\xb6\xa3\xa9\x1b\x90\x9e\x61\xdc\x97\x8d\x9e\xab\xf4\xce\x71\xa6\xc5\x19\x70\x98\xdb\x3a\x0c\x78\x10\x74\x27\x70\xc5\x92\x92\x68\xfb\xd3\x13\xcf\x76\x5e\xd8\x73\x43\x4b\x8a\x82\x95\x06\x33\x48\xa0\x7e\x1f\xed\x8f\xc2\x4a\xf2\x07\x7f\x14\x34\xe3\x53\x0e\xed\xba\xcb\x69\xce\x38\x35\xe6\xeb\x04\xbc\x98\xb4\x2d\x7b\x87\x1e\x5c\x5f\xba\x53\x36\x3b\x0e\xe7\xad\xf4\xfe\x46\x80\x98\xb2\xb9\xeb\xa7\xea\x62\xfc\x17\xcf\xb6\xb9\x2b\xad\x2a\x99\x4d\x6d\x49\xe4\x9f\x31\x65\x6b\x46\x4c\x3b\x9e\xa3\x19\x1c\xc8\x5d\x37\x3c\x85\xd4\x5a\x65\x06\x75\xd3\xe5\x1a\x59\xe8\xda\x44\x37\x5a\x28\x9d\xa1\x0e\x34\xcb\x78\x65\xa6\xf0\x69\xf9\x30\xfb\xa5\xed\x9c\x5d\x85\xfe\x04\xd0\x52\xe3\xfc\x0c\x4f\x9a\xba\x37\x67\xd7\xe0\xc5\x91\x25\x78\x9a\x49\x77\xd0\xfe\xdb\x70\xb8\xd0\x83\x40\xf7\xee\xba\x99\x2f\x78\x96\x09\xb4\x60\x5b\xe6\xf6\xb6\x59\x9b\x1f\xee\xcc\xb1\x38\x68\x1a\x8f\x96\x7e\x0f\x28\x0c\x3e\x4a\xdc\xf5\x2f\x43\x6b\xf0\xc0\x1e\x94\x3b\x3d\x37\xad\x90\x9b\xd6\x43\xa7\x81\xe6\x2b\x46\x56\x69\x57\x05\xf9\x41\xe3\x50\x37\x30\x34\xb6\x26\xcb\xcc\x70\x14\xe6\x55\xc1\x24\xff\x1d\x7d\x9b\x50\x46\xb5\x86\x5c\x43\xe4\x1d\xc7\xd5\x33\x20\x87\x06\x7b\xd8\x26\xa6\x61\xa3\xb8\x61\x6b\x4d\x6b\x38\x38\x34\xec\xc3\x77\xd0\xca\x65\x09\xc1\x82\x69\xe8\x0f\x82\x36\x5b\x82\x56\x56\x72\xbb\xb6\x60\x7a\x58\x37\x81\xae\x6e\x96\x6a\x93\x0c\x6f\xc7\x1d\xc0\xda\xb0\xce\xae\xc3\xc6\xaf\x4e\x0c\x60\x11\xb6\x17\x70\x0e\xb7\xe3\x0f\x47\x9a\x31\xb9\xc2\x53\xf4\xa4\x79\x89\x19\xb0\xd4\x36\xc1\x7f\xf8\x21\x3e\x58\xb9\xef\x0c\xcf\xfa\x5d\xab\x36\xe7\x96\x47\x58\xed\x6a\xa7\xd5\x3f\xdb\x7b\x05\x91\xd3\xed\x35\x78\x17\x0e\xf1\x88\xe7\x1d\x11\x9d\x5c\xde\xc7\xee\xb5\xeb\xe5\xbd\x7e\x92\xb0\xe5\x67\xf7\xea\x69\x14\xe6\x54\x08\xdf\x8b\xc9\x7d\x9f\xb2\x38\xbb\xdd\x6e\x73\x3d\x7d\xa8\xb7\xf6\xfd\xae\xc1\xf6\xc8\x78\xd2\xdd\x40\xaf\x8e\xe8\x3a\xa0\xb6\x68\x00\xdb\x4d\xed\x5d\x43\xf5\x86\x98\x26\x60\xf0\xd3\x2b\xa8\xca\x8c\x91\x4d\x42\x0a\x6c\x8a\x73\xc9\xa8\xfb\x98\xb7\x60\xda\xc0\x52\xe9\x0d\xd3\x19\x54\x92\xb8\xb0\xeb\x5b\x60\x1a\x9b\x9a\xcc\x20\xbd\xb2\x51\x69\xcd\x84\x7f\xd2\x67\x3d\xf3\x87\x61\xdf\xb0\xc3\x51\x88\x2c\xcd\x4f\xc9\x5c\xd6\xe9\x24\x26\xf0\xda\xd5\xe0\xfe\x33\x9f\x72\x6e\x46\x21\x23\xd2\xfe\xf0\xc8\xe0\xc3\x91\xb5\xdd\xa4\xeb\x7b\xba\xcd\x71\xef\xca\x3c\xb5\xff\x50\xd5\x36\x19\xbc\x25\x4e\x8d\xf1\x6b\xaf\x19\xde\xf4\xf8\x1e\x3b\xcd\xf0\xe3\x61\x63\x92\xc3\xa5\x3d\xe0\x4f\x2e\x60\x38\x62\x3b\xb4\x77\x67\x78\x22\x98\x65\xd9\x4b\x7b\x2f\x7c\xef\xc2\xed\xed\x7b\xc0\xa8\x51\x6c\x1d\x71\x9f\xd0\x28\x97\x19\x3e\x3c\xa6\x4e\x9e\x0d\x47\xa1\xa9\x16\x75\xef\xef\x7f\xd6\x74\x3b\x2d\x91\x73\xcb\xd3\x40\x7e\x96\xfe\xad\x80\xe3\x12\x20\x38\x29\x19\x9e\x88\xf9\x4e\xa0\x3d\xcd\xfe\xc6\x2a\x77\x3c\x6a\x5e\x0c\x7d\x63\x6c\x05\xc4\x4d\x0e\x0c\x36\xb8\x30\xae\x37\x87\xc6\x93\xdd\x1b\x92\xfa\x4d\xc8\x8b\xef\x5f\x75\x6f\x43\x3a\x4f\xb7\x45\x48\xf7\xd9\xfc\xfc\x5d\xc3\xc5\xaf\xf4\x9b\xcd\x26\x5c\x29\xb5\x12\xf5\xf7\xf9\xee\x65\x84\x6d\xd4\xc3\x3b\xe3\x01\x33\x5b\x99\x42\x86\x4b\xd4\xf3\x1e\xf3\xfa\x0d\x45\x1c\x35\x9f\x96\xa3\xfa\x3f\xc2\xfc\x27\x00\x00\xff\xff\xf0\xe8\x3f\x9d\x19\x23\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 8985, mode: os.FileMode(420), modTime: time.Unix(1683714330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": &bintree{faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

